<?php

namespace Altum;

use \Altum\Models\Settings;
use \Altum\Database\Database;

class Link {

    public static function get_biolink($tthis, $link, $user = null, $links = null) {

        /* Determine the background of the biolink */
        $link->design = new \StdClass();
        $link->design->background_class = '';
        $link->design->background_style = '';
		$link->design->page_transition = 0;

        /* Check if the user has the access needed from the package */
        if(!$user->package_settings->custom_backgrounds && in_array($link->settings->background_type, ['image', 'gradient', 'color'])) {

            /* Revert to a default if no access */
            $link->settings->background_type = 'preset';
            $link->settings->background = 'one';

        }

        switch($link->settings->background_type) {
            case 'image':

                $link->design->background_style = 'background: url(\'' . SITE_URL . UPLOADS_URL_PATH . 'backgrounds/' . $link->settings->background . '\');';

                break;

            case 'gradient':

                $link->design->background_style = 'background-image: linear-gradient(135deg, ' . $link->settings->background->color_one . ' 10%, ' . $link->settings->background->color_two . ' 100%);';

                break;

            case 'color':

                $link->design->background_style = 'background: ' . $link->settings->background . ';';

                break;

            case 'preset':

                $link->design->background_class = 'link-body-background-' . $link->settings->background;

                break;
				
			case 'anigradient':

                $link->design->background_class = 'link-body-background-anigradient';
				$link->design->background_style = 'background: linear-gradient(110deg, ' . $link->settings->background->color_one . ', ' . $link->settings->background->color_two . ', ' . $link->settings->background->color_three . ', ' . $link->settings->background->color_four . ');';

                break;
        }
		
		$link->design->page_transition = isset($link->settings->page_transition_type) ? $link->settings->page_transition_type : 0;
		
        /* Determine the color of the header text */
        $link->design->text_style = 'color: ' . $link->settings->text_color;

        /* Determine the socials text */
        $link->design->socials_style = 'color: ' . $link->settings->socials_color;
		
		$language = Language::get();
		$link->language_password = $language->link->settings;
		
        /* Determine the notification branding settings */
        if($user && !$user->package_settings->removable_branding && !$link->settings->display_branding) {
            $link->settings->display_branding = true;
        }

        if($user && $user->package_settings->removable_branding && !$link->settings->display_branding) {
            $link->settings->display_branding = false;
        }

        /* Check if we can show the custom branding if available */
        if(isset($link->settings->branding, $link->settings->branding->name, $link->settings->branding->url) && !$user->package_settings->custom_branding) {
            $link->settings->branding = false;
        }
		
		if($user->country=="MY") {
			$my_city = Database::$database->query("SELECT * FROM `my_city`");
			$areas = array('st'=>$my_city);
		} else {
			$province = Database::$database->query("SELECT * FROM `provinsi`");
			$city = Database::$database->query("SELECT * FROM `kota_kabupaten` WHERE kt_pv_id = 6");
			$subdistrict = Database::$database->query("SELECT * FROM `kecamatan` WHERE kc_kt_id = ".$city->fetch_object()->kt_id);
			$areas = array('pv'=>$province,'kt'=>$city,'kc'=>$subdistrict);
		}
        /* Prepare the View */
        $data = [
            'link'  => $link,
            'user'  => $user,
            'links' => $links,
			'areas' => $areas
        ];

        $view = new \Altum\Views\View('link-path/partials/biolink', (array) $tthis);

        return $view->run($data);

    }

    public static function get_biolink_link($link, $user = null) {

        $data = [];
		
		$settings = (new Settings())->get();

        /* Initiate the Language system */
        Language::initialize(APP_PATH . 'languages/', $settings->default_language);

        /* Get the needed language strings */
        $language = Language::get();
		
        /* Require different files for different types of links available */
        switch($link->subtype) {
            case 'link':
            case 'mail':

                $link->settings = json_decode($link->settings);

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->background_color = 'white';
                    $link->settings->text_color = 'black';

                    if($link->settings->outline) {
                        $link->settings->background_color = 'white';
                        $link->settings->text_color = 'white';
                    }
                }

                /* Determine the css and styling of the button */
                $link->design = new \StdClass();
                $link->design->link_class = '';
                $link->design->link_style = 'background: ' . $link->settings->background_color . ';color: ' . $link->settings->text_color;

                /* Type of button */
                if($link->settings->outline) {
                    $link->design->link_style = 'color: ' . $link->settings->text_color . '; background: transparent; border: .1rem solid ' . $link->settings->background_color;
                }

                /* Border radius */
                switch($link->settings->border_radius) {
                    case 'straight':
                        break;

                    case 'round':
                        $link->design->link_class = 'link-btn-round';
                        break;

                    case 'rounded':
                        $link->design->link_class = 'link-btn-rounded';
                        break;
                }

                /* Animation */
                if($link->settings->animation) {
                    $link->design->link_class .= ' animated infinite ' . $link->settings->animation . ' delay-2s';
                }

                /* UTM Parameters */
                $link->utm_query = null;
				if(isset($link->utm) && isset($user->package_settings->utm)) {
					if($user->package_settings->utm && $link->utm->medium && $link->utm->source) {
						$link->utm_query = '?utm_medium=' . $link->utm->medium . '&utm_source=' . $link->utm->source . '&utm_campaign=' . $link->settings->name;
					}
				}

                switch($link->subtype) {
                    case 'link':
                        $view_path = 'link-path/partials/biolink_link';
                        break;

                    case 'mail':
                        $view_path = 'link-path/partials/biolink_link_mail';
                        break;
                }

                break;

            case 'text':

                $link->settings = json_decode($link->settings);
                
                $link->settings->description = cleanHTMLBody($link->settings->description);

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->title_text_color = 'white';
                    $link->settings->description_text_color = 'white';

                }

                $view_path = 'link-path/partials/biolink_link_text';

                break;
			
			case 'html':

                $link->settings = json_decode($link->settings);
                
                $link->settings->description = cleanHTMLBody($link->settings->description);

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->description_text_color = 'white';

                }

                $view_path = 'link-path/partials/biolink_link_html';

                break;
            
            case 'runningtext':

                $link->settings = json_decode($link->settings);

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->description_runningtext_color = 'white';
                    $link->settings->scrollamount = 6;

                }

                $view_path = 'link-path/partials/biolink_link_runningtext';

                break;
			
            case 'youtube':

                if(preg_match('/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((?:\w|-){11})(?:&list=(\S+))?$/', $link->location_url, $match)) {
                    $data['embed'] = $match[1];

                    $view_path = 'link-path/partials/biolink_link_youtube';
                }

                break;

            case 'soundcloud':
				$link->settings = $link->settings ? json_decode($link->settings) : null;
				
                if(preg_match('/(soundcloud\.com)/', $link->location_url)) {
                    $data['embed'] = $link->location_url;
					$data['autoplay'] = isset($link->settings->autoplay)&&$link->settings->autoplay ? 'true' : 'false';

                    $view_path = 'link-path/partials/biolink_link_soundcloud';
                }

                break;

            case 'vimeo':

                if(preg_match('/https:\/\/(player\.)?vimeo\.com(\/video)?\/(\d+)/', $link->location_url, $match)) {
                    $data['embed'] = $match[3];

                    $view_path = 'link-path/partials/biolink_link_vimeo';
                }

                break;

            case 'twitch':

                if(preg_match('/^(?:https?:\/\/)?(?:www\.)?(?:twitch\.tv\/)(.+)$/', $link->location_url, $match)) {
                    $data['embed'] = $match[1];

                    $view_path = 'link-path/partials/biolink_link_twitch';
                }

                break;

            case 'spotify':

                if(preg_match('/^(?:https?:\/\/)?(?:www\.)?(?:open\.)?(?:spotify\.com\/)(album|track|show|episode)+\/(.+)$/', $link->location_url, $match)) {
                    $data['embed_type'] = $match[1];
                    $data['embed_value'] = $match[2];

                    $view_path = 'link-path/partials/biolink_link_spotify';
                }

                break;

            case 'tiktok':


                if(preg_match('/^(?:https?:\/\/)?(?:www\.)?(?:tiktok\.com\/.+\/)(.+)$/', $link->location_url, $match)) {
                    $data['embed'] = $match[1];

                    $view_path = 'link-path/partials/biolink_link_tiktok';
                }

                break;
			
			case 'picture':
			
				$link->settings = json_decode($link->settings);
                $view_path = 'link-path/partials/biolink_link_picture';

                break;
				
			case 'banner':
			
				$picture_url = json_decode($link->settings,true)['picture_url'];
                if(preg_match('/[\w\-]+\.(jpg|png|gif|jpeg)/', $picture_url, $match)) {
                    $data['url'] = $match[1];

                    $view_path = 'link-path/partials/biolink_link_banner';
                }

                break;
				
			case 'sliders':
			
				$link->settings = json_decode($link->settings);
				
				$link->settings->slider_position = '';
				
				if($link->settings->slider_animation=='right') {
					$link->settings->slider_position = 'rtl';
				} elseif($link->settings->slider_animation=='top') {
					$link->settings->slider_position = 'ttb';
				} elseif($link->settings->slider_animation=='bottom') {
					$link->settings->slider_position = 'btt';
				}
								
				$view_path = 'link-path/partials/biolink_link_sliders';
				
                break;
				
			case 'waform':

                $link->settings = json_decode($link->settings);
				
				$link->language_public = $language->create_biolink_waform_modal->public;
		
				$language = null;

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->background_color = 'white';
                    $link->settings->text_color = 'black';

                    if($link->settings->outline) {
                        $link->settings->background_color = 'white';
                        $link->settings->text_color = 'white';
                    }
                }

                /* Determine the css and styling of the button */
                $link->design = new \StdClass();
                $link->design->link_class = '';
                $link->design->link_style = 'background: ' . $link->settings->background_color . ';color: ' . $link->settings->text_color;

                /* Type of button */
                if($link->settings->outline) {
                    $link->design->link_style = 'color: ' . $link->settings->text_color . '; background: transparent; border: .1rem solid ' . $link->settings->background_color;
                }

                /* Border radius */
                switch($link->settings->border_radius) {
                    case 'straight':
                        break;

                    case 'round':
                        $link->design->link_class = 'link-btn-round';
                        break;

                    case 'rounded':
                        $link->design->link_class = 'link-btn-rounded';
                        break;
                }

                /* Animation */
                if($link->settings->animation) {
                    $link->design->link_class .= ' animated infinite ' . $link->settings->animation . ' delay-2s';
                }

                /* UTM Parameters */
                $link->utm_query = null;
				if(isset($link->utm) && isset($user->package_settings->utm)) {
					if($user->package_settings->utm && $link->utm->medium && $link->utm->source) {
						$link->utm_query = '?utm_medium=' . $link->utm->medium . '&utm_source=' . $link->utm->source . '&utm_campaign=' . $link->settings->name;
					}
				}

                $view_path = 'link-path/partials/biolink_link_waform';

                break;
				
			case 'cartform':

                $link->settings = json_decode($link->settings);
				
				$link->language_public = $language->create_biolink_cartform_modal->public;
		
				$language = null;

                /* Check if the user has the access needed from the package */
                if(!$user->package_settings->custom_colored_links) {

                    /* Revert to a default if no access */
                    $link->settings->background_color = 'white';
                    $link->settings->text_color = 'black';

                    if($link->settings->outline) {
                        $link->settings->background_color = 'white';
                        $link->settings->text_color = 'white';
                    }
                }

                /* Determine the css and styling of the button */
                $link->design = new \StdClass();
                $link->design->link_class = '';
                $link->design->link_style = 'background: ' . $link->settings->background_color . ';color: ' . $link->settings->text_color;

                /* Type of button */
                if($link->settings->outline) {
                    $link->design->link_style = 'color: ' . $link->settings->text_color . '; background: transparent; border: .1rem solid ' . $link->settings->background_color;
                }

                /* Border radius */
                switch($link->settings->border_radius) {
                    case 'straight':
                        break;

                    case 'round':
                        $link->design->link_class = 'link-btn-round';
                        break;

                    case 'rounded':
                        $link->design->link_class = 'link-btn-rounded';
                        break;
                }

                /* Animation */
                if($link->settings->animation) {
                    $link->design->link_class .= ' animated infinite ' . $link->settings->animation . ' delay-2s';
                }

                /* UTM Parameters */
                $link->utm_query = null;
                if(isset($link->utm) && isset($user->package_settings->utm)) {
					if($user->package_settings->utm && $link->utm->medium && $link->utm->source) {
						$link->utm_query = '?utm_medium=' . $link->utm->medium . '&utm_source=' . $link->utm->source . '&utm_campaign=' . $link->settings->name;
					}
				}
				
                $view_path = 'link-path/partials/biolink_link_cartform';

                break;
				
			case 'googlemap':

				$link->settings = json_decode($link->settings);
				
                if(preg_match('/^(\-?\d+(\.\d+)?),\s*(\-?\d+(\.\d+)?)$/', $link->settings->coordinates, $match)) {
                    $data['coordinates'] = $match[0];
					
                    $view_path = 'link-path/partials/biolink_link_googlemap';
                }

                break;
				
			case 'countdown':

				$link->settings = json_decode($link->settings);
				
				if(isset($link->settings->days)&&!empty($link->settings->days))
					$link->settings->days = strtoupper($link->settings->days);
				else
					$link->settings->days = 'DAYS';
				
				if(isset($link->settings->hours)&&!empty($link->settings->hours))
					$link->settings->hours = strtoupper($link->settings->hours);
				else
					$link->settings->hours = 'HOURS';
				
				if(isset($link->settings->minutes)&&!empty($link->settings->minutes))
					$link->settings->minutes = strtoupper($link->settings->minutes);
				else
					$link->settings->minutes = 'MINUTES';
				
				if(isset($link->settings->seconds)&&!empty($link->settings->seconds))
					$link->settings->seconds = strtoupper($link->settings->seconds);
				else
					$link->settings->seconds = 'SECONDS';
				
                $view_path = 'link-path/partials/biolink_link_countdown';

                break;
				
			case 'floatbutton':
			
				$link->settings = json_decode($link->settings);
				$link->settings->position_class = "";
				
				if($link->settings->position=='left')
					$link->settings->position_class = " circular-menu-left";
				elseif($link->settings->position=='center')
					$link->settings->position_class = " circular-menu-center";
								
				$view_path = 'link-path/partials/biolink_link_floatbutton';
				
                break;
                
            case 'domain':
				
				$link->settings = json_decode($link->settings);
				
                if(filter_var($link->settings->location_url, FILTER_VALIDATE_URL)) {
                    $data['embed'] = $link->settings->location_url;
					$data['type_height'] = $link->settings->type_height;
					if($link->settings->type_height==0)
						$data['height'] = 'auto';
					else
						$data['height'] = $link->settings->height . 'px';
					
                    $view_path = 'link-path/partials/biolink_link_domain';
                }

                break;
				
			case 'pricingtable':

				$link->settings = json_decode($link->settings);
				
				$new_object = array();
				
				foreach($link->settings->pricings as $pt) {
					$new_object[] = array("name" => $pt->name,
										  "currency" => $pt->currency,
										  "price" => $pt->price,
										  "price_text" => number_format($pt->price,0,'',','));
				}
				
				$link->settings->order_object = json_encode($new_object);
				
				$link->language_public = $language->create_biolink_cartform_modal->public;
				
				$link->settings->col_class = "col-lg-6";
				if(count($link->settings->pricings)>2)
					$link->settings->col_class = "col-lg-4";
				
                $view_path = 'link-path/partials/biolink_link_pricingtable';

                break;
				
			case 'eshop':

				$link->settings = json_decode($link->settings);
				
                $view_path = 'link-path/partials/biolink_link_eshop';

                break;
        }

        if(!isset($view_path)) return null;

        /* Prepare the View */
        $data = array_merge($data, [
            'link'  => $link,
            'user'  => $user
        ]);

        $view = new \Altum\Views\View($view_path);

        return $view->run($data);

    }
}
